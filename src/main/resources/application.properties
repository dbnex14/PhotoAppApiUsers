# port where this app will run, 0 means a random port will be assigned.  We could hardcode port to say 8080 but then
# as we start new instances of microservices, so we will need to track which port were used by which microservices
# and open app.prop file and to each instance assign a port number.  So, having it automaticall assigned is convenient.
# Below, we set port number to PORT which will be assigned if we passed it as command line arg, but if not, it will be
# 0 which means it will be randomly generated for us
server.port=${PORT:0}
# name this app will be known in eureka dashboard
spring.application.name=users-ws
# fully qualified url by which our Eureka client will communicate with Eureka server.  Port 8010 is what we specified
# in Eureka server
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
# We added devtools to have our app automatically restart and redeploy when we change java code.  Sometimes, we can
# disable this by setting to 'false'.
spring.devtools.restart.enabled=true
# if we start more instances, they may simply overwrite already registered instance in the Eureka dashboard therefore
# appearing as single instance is running although we have 2 instances of same microservice up and running (you can see
# that in output console).  this is because when we start multiple instances, application.name will still be the
# same.
# To avoid that we add below property so that each instance gets unique instance id which will identify the running
# instance of microservice.  We create it by combining application.name, and application.instance_id which we can pass
# as agument from command line or have it randomly generated for us.  By the way, we can do same with the port #.
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

### H2
spring.h2.console.enabled=true
## h2 db server has little firewall built in and because we are going to connect to Users microservice going
## through ApiGateway, we need to enable connections from other addresses
spring.h2.console.settings.web-allow-others=true
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

### MySQL
# We left above H2 settings so we can use H2 console to connect to MySQL.
# For serverTimezone, you can provide your timezone but we prefer UTC
spring.datasource.url=jdbc:mysql://localhost:3306/photo_app?serverTimezone=UTC
# MySQL credentials for user created in MySQL
spring.datasource.username=dinouser
spring.datasource.password=dinouser
# To see options available for ddl-auto, hold Ctrl+Space.
# 'create' creates new schema each time
# 'none' used when database schema is created using SQL scripts.  Mostly used in
#   Production when database schema is already created as it should and you dont
#   want to accidentally alter it.
# 'update' creates schema if non-existing, else update it (most commonly used)
# create-drop' for testing as it will create schema for test and drop it after
spring.jpa.hibernate.ddl-auto=update

### Api Gateway IP Address as displayed in the Eureka dashboard
#gateway.ip=192.168.1.76
gateway.ip=192.168.1.74

### JWT 10 days expiration
token.expiration_time=864000000
token.secret=asdfiupoaasqew111

### Custom login endpoint (Spring default is just /login).  We could also call it /users/auth
login.url.path=/users/login

# To configure this microservice to be client of our PhotoAppApiConfigServer (the port is Config server's port)
# In lesson 130 @1:40 mark, Sergey says this is what is needed to make this service a client
# of PhotoAppApiConfigServer, rather than creating the bootstrap.properties with the settings
# there.  However, I created bootstrap.properties file and just added this commented out here.
# I used this new way in ApiGateway though.
#spring.config.import=optional:configserver:http://localhost:8012

# connection credentials for RabbitMQ server
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Actuators - this actuator can be accessed through ApiGateway like
# http://localhost:8082/users-ws/actuator/mappings where port is port
# of ApiGateway so that we access this actuator through ApiGateway
management.endpoints.web.exposure.include=mappings
